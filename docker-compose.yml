
services:
  app:
    build: .
    container_name: skyhawk-app-1
    depends_on:
      - db
      - kafka
    ports:
      - "${APP_PORT}:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    volumes:
      - .m2:/root/.m2
    networks:
      - skyhawk-network
    develop:
      watch:
        - action: sync
          path: ./src
          target: /target

        - action: sync+restart
          path: ./src
          target: /target
    restart: unless-stopped

  stats-consumer:
    build: .
    container_name: skyhawk-stats-consumer-1
    command: ["java", "-jar", "app.jar", "--spring.profiles.active=consumer"]
    develop:
      watch:
        - action: sync
          path: ./src
          target: /target

        - action: sync+restart
          path: ./src
          target: /target
    depends_on:
      - db
      - kafka
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:${KAFKA_PORT}
    networks:
      - skyhawk-network
    restart: unless-stopped

  db:
    image: postgres:15
    container_name: skyhawk-db-1
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - skyhawk-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  init-db:
    image: postgres:15
    container_name: skyhawk-init-db-1
    command: ["/docker-entrypoint-initdb.d/01-init.sh"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST=db
    volumes:
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql
      - ./src/main/resources/data.sql:/docker-entrypoint-initdb.d/03-data.sql
      - ./init-db.sh:/docker-entrypoint-initdb.d/01-init.sh
    networks:
      - skyhawk-network
    restart: "no"

  # Add Kafka and Zookeeper services
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: skyhawk-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    networks:
      - skyhawk-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: skyhawk-kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - skyhawk-network

volumes:
  postgres_data:

networks:
  skyhawk-network:
    driver: bridge 